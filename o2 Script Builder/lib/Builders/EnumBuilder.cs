using System.Collections.Generic;
using System.Text;

namespace o2.Runtime.ScriptGeneration {

    /// <summary>
    /// Dynamically generates a C# enum declaration with specified name, values, and optional namespace.
    /// </summary>
    public class EnumBuilder : IBuildable {

        private readonly List<string> _enumValues = new();
        private readonly string EnumName;
        private readonly string _namespace;
        private readonly AccessModifier AccessModifier = AccessModifier._public;

        /// <summary>
        /// Initializes a new instance for creating an enum with the given name and namespace.
        /// </summary>
        public EnumBuilder(string enumName, string @namespace = "") {
            EnumName = enumName;
            _namespace = @namespace;
        }

        /// <summary>
        /// Adds multiple values to the enum, replacing dashes with underscores for naming compatibility.
        /// </summary>
        public EnumBuilder AddEnumValue(string[] enumValues) {
            foreach (var enumValue in enumValues)
                _enumValues.Add(enumValue.Replace("-", "_"));
            return this;
        }

        /// <summary>
        /// Builds and returns the complete enum code as a formatted string.
        /// </summary>
        public string Build() {
            StringBuilder sb = new();
            var hasNamespace = !string.IsNullOrEmpty(_namespace);
            
            if (hasNamespace) {
                sb.AppendLine($"namespace {_namespace}");
                sb.AppendLine("{");
            }

            sb.AppendLine("// Generated by o2 Script Generator");
            sb.AppendLine($"{AccessModifier.ToString().ToLower().Replace("_", " ")} enum {EnumName}");
            sb.AppendLine("{");

            for (var index = 0; index < _enumValues.Count; index++) {
                var enumValue = _enumValues[index];
                sb.Append($"\t{enumValue}");
                if (index < _enumValues.Count - 1)
                    sb.Append(",\n");
            }

            sb.AppendLine("\n}");
            
            if (hasNamespace)
                sb.AppendLine("}");
            
            return sb.ToString();
        }
    }
}
